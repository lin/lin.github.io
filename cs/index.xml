<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computer Science Related on Yingkui</title><link>https://yingkui.com/cs/</link><description>Recent content in Computer Science Related on Yingkui</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Copyright Yingkui.com All Rights Reserved</copyright><lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate><atom:link href="https://yingkui.com/cs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://yingkui.com/cs/annotatedturing/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/annotatedturing/readme/</guid><description>node --stack-size=8000 5.1
In the paper, Turing proposed a machine which he argued is capable to do whatever a human computer could do.
And this machine has some limitations. Notably no machine can determine whether a given machine ever prints a zero or not.
But in first order logic (FOL), we don&amp;rsquo;t have the limitation to construct such a formula (whether a machine ever prints a zero).
Then main argument goes:</description></item><item><title/><link>https://yingkui.com/cs/babel-parser-lite/node_modules/@babel/parser/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/babel-parser-lite/node_modules/@babel/parser/changelog/</guid><description>Changelog Tags:
:boom: [Breaking Change] :eyeglasses: [Spec Compliancy] :rocket: [New Feature] :bug: [Bug Fix] :memo: [Documentation] :house: [Internal] :nail_care: [Polish] Semver Policy: https://github.com/babel/babel/tree/master/packages/babel-parser#semver
Note: Gaps between patch versions are faulty, broken or test releases.
See the Babel Changelog for the pre-6.8.0 version Changelog.
6.17.1 (2017-05-10) :bug: Bug Fix Fix typo in flow spread operator error (Brian Ng) Fixed invalid number literal parsing (#473) (Alex Kuzmenko) Fix number parser (#433) (Alex Kuzmenko) Ensure non pattern shorthand props are checked for reserved words (#479) (Brian Ng) Remove jsx context when parsing arrow functions (#475) (Brian Ng) Allow super in class properties (#499) (Brian Ng) Allow flow class field to be named constructor (#510) (Brian Ng) 6.</description></item><item><title/><link>https://yingkui.com/cs/babel-parser-lite/node_modules/@babel/parser/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/babel-parser-lite/node_modules/@babel/parser/readme/</guid><description>@babel/parser A JavaScript parser
See our website @babel/parser for more information or the issues associated with this package.
Install Using npm:
npm install --save-dev @babel/parser or using yarn:
yarn add @babel/parser --dev</description></item><item><title/><link>https://yingkui.com/cs/babel-parser-lite/node_modules/charcodes/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/babel-parser-lite/node_modules/charcodes/readme/</guid><description>Exports Constant number backSpace Constant number tab Constant number lineFeed Constant number carriageReturn Constant number shiftOut Constant number space Constant number exclamationMark Constant number quotationMark Constant number numberSign Constant number dollarSign Constant number percentSign Constant number ampersand Constant number apostrophe Constant number leftParenthesis Constant number rightParenthesis Constant number asterisk Constant number plusSign Constant number comma Constant number dash Constant number dot Constant number slash Constant number digit0 Constant number digit1 Constant number digit2 Constant number digit3 Constant number digit4 Constant number digit5 Constant number digit6 Constant number digit7 Constant number digit8 Constant number digit9 Constant number colon Constant number semicolon Constant number lessThan Constant number equalsTo Constant number greaterThan Constant number questionMark Constant number atSign Constant number uppercaseA Constant number uppercaseB Constant number uppercaseC Constant number uppercaseD Constant number uppercaseE Constant number uppercaseF Constant number uppercaseG Constant number uppercaseH Constant number uppercaseI Constant number uppercaseJ Constant number uppercaseK Constant number uppercaseL Constant number uppercaseM Constant number uppercaseN Constant number uppercaseO Constant number uppercaseP Constant number uppercaseQ Constant number uppercaseR Constant number uppercaseS Constant number uppercaseT Constant number uppercaseU Constant number uppercaseV Constant number uppercaseW Constant number uppercaseX Constant number uppercaseY Constant number uppercaseZ Constant number leftSquareBracket Constant number backslash Constant number rightSquareBracket Constant number caret Constant number underscore Constant number graveAccent Constant number lowercaseA Constant number lowercaseB Constant number lowercaseC Constant number lowercaseD Constant number lowercaseE Constant number lowercaseF Constant number lowercaseG Constant number lowercaseH Constant number lowercaseI Constant number lowercaseJ Constant number lowercaseK Constant number lowercaseL Constant number lowercaseM Constant number lowercaseN Constant number lowercaseO Constant number lowercaseP Constant number lowercaseQ Constant number lowercaseR Constant number lowercaseS Constant number lowercaseT Constant number lowercaseU Constant number lowercaseV Constant number lowercaseW Constant number lowercaseX Constant number lowercaseY Constant number lowercaseZ Constant number leftCurlyBrace Constant number verticalBar Constant number rightCurlyBrace Constant number tilde Constant number nonBreakingSpace Constant number oghamSpaceMark Constant number lineSeparator Constant number paragraphSeparator function isDigit(code)</description></item><item><title/><link>https://yingkui.com/cs/babel-parser-lite/parser/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/babel-parser-lite/parser/changelog/</guid><description>Changelog Tags:
:boom: [Breaking Change] :eyeglasses: [Spec Compliancy] :rocket: [New Feature] :bug: [Bug Fix] :memo: [Documentation] :house: [Internal] :nail_care: [Polish] Semver Policy: https://github.com/babel/babel/tree/master/packages/babel-parser#semver
Note: Gaps between patch versions are faulty, broken or test releases.
See the Babel Changelog for the pre-6.8.0 version Changelog.
6.17.1 (2017-05-10) :bug: Bug Fix Fix typo in flow spread operator error (Brian Ng) Fixed invalid number literal parsing (#473) (Alex Kuzmenko) Fix number parser (#433) (Alex Kuzmenko) Ensure non pattern shorthand props are checked for reserved words (#479) (Brian Ng) Remove jsx context when parsing arrow functions (#475) (Brian Ng) Allow super in class properties (#499) (Brian Ng) Allow flow class field to be named constructor (#510) (Brian Ng) 6.</description></item><item><title/><link>https://yingkui.com/cs/babel-parser-lite/parser/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/babel-parser-lite/parser/readme/</guid><description>@babel/parser A JavaScript parser
See our website @babel/parser for more information or the issues associated with this package.
Install Using npm:
npm install --save-dev @babel/parser or using yarn:
yarn add @babel/parser --dev</description></item><item><title/><link>https://yingkui.com/cs/babel-parser-lite/src/note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/babel-parser-lite/src/note/</guid><description>Hard Part about Babel Parser noIn This is what means for noIn:
Not OK to say: for (a in b;;) {} All other expressions are fit for the first position. So a single lookahead is hard to tell the difference.
refShorthandDefaultPos This is what means for it: let {a, b = 3} = {a: 1} or x = {a, b} or function func({ a, b = 3}) {}
So {a, b = 3} can be interpreted { expr -&amp;gt; exprList -&amp;gt; id, Assignment -&amp;gt; id, id = literal }</description></item><item><title/><link>https://yingkui.com/cs/clrs/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/clrs/readme/</guid><description>Time Complexity minHeap Operation Big-O Notes Insert O(log n) 1. insert at last; 2, heapifyUp Remove O(log n) 1. swap first and last; 2, heapifyDown buildHeap O(n) from parent(last) to 1, heapifyDown heap sort O(n log n) 1.build need n, 2, removeMin need lg n Array and List Operation Array Linked List InsertFront O(1)* O(1) InsertAfter O(n) O(1) RemoveAfter O(n) O(1) Find O(n) O(n) Access O(1) O(n) Stack and Queue Everything (create, push, pop, empty) is O(1) or O(1)*</description></item><item><title/><link>https://yingkui.com/cs/csapp/hasm/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/csapp/hasm/readme/</guid><description>how to reduce IA32 to Hack Assembly
how to reduce Hack Assembly to minimum
how to reduce ALU to minimum (better remove the A part)
distinction (symbolization)
transformation rules
composition rules
the for_all part in transformation and composition
addition and inc is for progression of the index and for the shortcut for distinguishability.
multiplication, divide, shift(4) reduce a&amp;amp;l operations
all other seems like simply encode and decode.
D is for temp, can&amp;rsquo;t be referenced.</description></item><item><title/><link>https://yingkui.com/cs/csapp/note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/csapp/note/</guid><description>Chapter 4: Processor Design 4.1 Introduce a new ISA called Y86. (RISC, CISC)
4.2 Gates, ALU, Memory and Clock. Too little information. Talking too fast.
4.3 Implement this ISA using circuit logic. Introduce FDEMW stages, and sequential process
4.4 Pipeline Principles
4.5 Implementation of Pipeline
Chapter 5: Skipped. Read after all others have been read.
Chapter 6: Memory Hierarchy 6.1 Kinds of Physical Memory Device
6.2 Locality (Less Jump through memory)</description></item><item><title/><link>https://yingkui.com/cs/csapp/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/csapp/readme/</guid><description>Learning by Implementing operand, 3.4.1 Operand Specifiers, CSAPP.2.169
move, 3.4.2 Data Movement Instructions, CSAPP.2.171
procedure, 3.7 Procedure
stack pointer is the frontier of the stack
base pointer is the base of the current stack
above the base is the params for the current stack provided by the callee
and on the stack is the locals used by current function
At the same time, function can access the higher level variables by scoping.</description></item><item><title/><link>https://yingkui.com/cs/gsap-light/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/gsap-light/readme/</guid><description>Minified Logic:
let tl = new Timeline() tl.add(new Tween(target: &amp;#39;#square&amp;#39;, {duration: 1, x: 100})) tl.add(new Tween(target: &amp;#39;#circle&amp;#39;, {duration: 2, y: 300})) tick (time) { let tlTime = (time - tl.start) * tl.timeScale for (const tween in tl.children) { let currentTime = (tlTime - tween.start) * tween.timeScale let duration = tween.duration * tween.timeScale let progress = currentTime / duration let ratio = tween.easeFunction(progress) let value = tween.startValue + ratio * tween.changeValue tween.</description></item><item><title/><link>https://yingkui.com/cs/katex-lite/builder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/katex-lite/builder/</guid><description>&lt;!DOCTYPE html> Test Font f(x)=â«xdx</description></item><item><title/><link>https://yingkui.com/cs/katex-lite/note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/katex-lite/note/</guid><description>expand the macro is hard</description></item><item><title/><link>https://yingkui.com/cs/katex-lite/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/katex-lite/readme/</guid><description>katex-lite KaTex Lite
Todo List:
Base Parser Function Data for Parser Base Generator How to Draw Style Strut Fraction Sqrt Function Data for Generator Main Function
GenFrac Sqrt Integral Sin / Cos / Log</description></item><item><title/><link>https://yingkui.com/cs/mds/parsers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/mds/parsers/</guid><description>1. Grammar that is SLR(1), but not LR(0) S -&amp;gt; a A c | a B d. A -&amp;gt; z. B -&amp;gt; z. The test string can be azc.
Click for more about the above grammar, LR(0) Item Sets
The reason it&amp;rsquo;s not LR(0) is that after reading the same token a, and same token z, you have two choices to reduce. (state 5)
But you can distinguish A and B by comparing the follow sets of A and B.</description></item><item><title/><link>https://yingkui.com/cs/mds/unicode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/mds/unicode/</guid><description>The first 128 chars are ASCII or Control Chars and Basic Latin, which is the most important part of the Unicode.
Among the first 128, the first 32 are control chars, notably:
10, 0x000A is New Line (NL) \n
13, 0x000D is Carriage Return (CR) \r
Among the first 128, the next 96 are basic latin, notably:
32, 0x0020 is space, . One of the most important charcodes.
48, 0x0030 is 0, between space and zero are: !</description></item><item><title/><link>https://yingkui.com/cs/notes/algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/notes/algorithms/</guid><description>insertion sort
selection sort
merge sort (divide and conquer)
incremental
divide and conquer (nlgn)</description></item><item><title/><link>https://yingkui.com/cs/notes/circuit-logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/notes/circuit-logic/</guid><description>The computer is a hardware implementation of Turing Machine.
The information is encoded by high and low voltage of transistors.
The elementaty of information transformation is presented by And Or Not gates, alternatively the three gates (NAND) can be made through Nand gates. By using these primative gates all transformation of f(\vec{a}) = \vec{b} can be realize, in the symbol set of {0, 1}. This is the combinatory logic part.</description></item><item><title/><link>https://yingkui.com/cs/notes/logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/notes/logic/</guid><description>The training purpose is:
Understand the concepts of SL and PL(First Order Logic) Understand how Turing proved the decision problem. Why Turing machine and Lambda Calculus is equivalent. Understand how Godel proved the incompleteness theorem.</description></item><item><title/><link>https://yingkui.com/cs/rails/web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/rails/web/</guid><description>Web Problems How to deal with Routes so we can distinguish request How to response according to a request Workflow Basic design using figma Mockup with tailwind Replace HTML using jsx Add seed data for react Add interaction using react Add api with react</description></item><item><title/><link>https://yingkui.com/cs/react/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/react/basic/</guid><description>React.createElement( &amp;#39;h1&amp;#39;, // type {}, // props &amp;#39;Hello, React!&amp;#39; // children ); Generate HTML String Re-render when state change. Use Effect useEffect(() =&amp;gt; { // Code to run on mount and update (componentDidMount and componentDidUpdate) return () =&amp;gt; { // Cleanup code (componentWillUnmount) }; }, [someValue]); // Run again only if `someValue` changes</description></item><item><title/><link>https://yingkui.com/cs/react/state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/react/state/</guid><description>React State const StateTestComponent = () =&amp;gt; { const dateWithoutState = new Date() const [dateWithState, setDateWithState] = useState(new Date()) const [count, setCount] = useState(0) return ( &amp;lt;div className=&amp;#34;flex flex-row text-2xl h-screen&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;left-half&amp;#34; className=&amp;#34;bg-red-300 w-1/4&amp;#34;&amp;gt; {dateWithoutState.toISOString()} &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;right-half&amp;#34; className=&amp;#34;bg-blue-300 w-1/4&amp;#34;&amp;gt; &amp;lt;div&amp;gt;{dateWithState.toISOString()}&amp;lt;/div&amp;gt; &amp;lt;button onClick={() =&amp;gt; setDateWithState(new Date())}&amp;gt;Update Time&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;right-half&amp;#34; className=&amp;#34;bg-purple-300 w-2/4&amp;#34;&amp;gt; &amp;lt;div&amp;gt;{count}&amp;lt;/div&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;Update Count&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ) }</description></item><item><title/><link>https://yingkui.com/cs/server/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/docker/</guid><description>Docker database and app should be treat separately. app install ruby rails node yarn gems ssh git should be handle differently. ruby rails node yarn ###============= # RUBY AND NODE ###============= ARG RUBY_VERSION=3.3.0 FROM registry.docker.com/library/ruby:$RUBY_VERSION-slim # Rails app lives here WORKDIR /rails # Set production environment ENV RAILS_ENV=&amp;#34;production&amp;#34; \ BUNDLE_DEPLOYMENT=&amp;#34;1&amp;#34; \ BUNDLE_PATH=&amp;#34;/usr/local/bundle&amp;#34; \ BUNDLE_WITHOUT=&amp;#34;development&amp;#34; # Install packages needed to build gems and node modules RUN apt-get update -qq &amp;amp;&amp;amp; \ apt-get install --no-install-recommends -y build-essential curl git libpq-dev libvips node-gyp pkg-config python # Install JavaScript dependencies ARG NODE_VERSION=14.</description></item><item><title/><link>https://yingkui.com/cs/server/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/git/</guid><description>GIT sudo apt install git git config --global user.name &amp;#34;My Name&amp;#34; git config --global user.email my@gmail.com ssh-keygen -t ed25519 -C &amp;#34;my@gmail.com&amp;#34; eval &amp;#34;$(ssh-agent -s)&amp;#34; ssh-add ~/.ssh/id_ed25519 # copy to github cat ~/.ssh/id_ed25519.pub # copy SSH k sudo chown ubuntu /var/www cd /var/www git clone git@github.com:username/app.git cd app</description></item><item><title/><link>https://yingkui.com/cs/server/nginx-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/nginx-config/</guid><description>Config passenger-config about ruby-command # passenger_ruby /usr/share/rvm/gems/ruby-3.3.0/wrappers/ruby sudo vim /etc/nginx/nginx.conf server { listen 80; server_name 1.2.3.4; root /var/www/app/public; passenger_enabled on; passenger_ruby /usr/share/rvm/gems/ruby-3.3.0/wrappers/ruby; } sudo service nginx reload sudo service nginx restart passenger-status sudo passenger-config restart-app $(pwd)</description></item><item><title/><link>https://yingkui.com/cs/server/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/nginx/</guid><description>Nginx # installation sudo apt install nginx nginx -v sudo service nginx start sudo service nginx stop # How to use ngnix vim /etc/nginx/nginx.conf # nginx config file location sudo nginx -s reload # make config file working Passenger https://www.phusionpassenger.com/docs/advanced_guides/install_and_upgrade/nginx/install/oss/jammy.html
sudo apt-get install -y dirmngr gnupg apt-transport-https ca-certificates curl curl https://oss-binaries.phusionpassenger.com/auto-software-signing-gpg-key.txt | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/phusion.gpg &amp;gt;/dev/null # Add our APT repository sudo sh -c &amp;#39;echo deb https://oss-binaries.phusionpassenger.com/apt/passenger jammy main &amp;gt; /etc/apt/sources.</description></item><item><title/><link>https://yingkui.com/cs/server/pg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/pg/</guid><description>PG sudo apt install postgresql postgresql-contrib psql --version User # sudo -u postgres psql postgres sudo -i -u postgres psql postgres \password postgres \q # sudo -u postgres createuser --superuser ubuntu createuser --superuser ubuntu sudo -u postgres psql postgres \password ubuntu \q sudo /etc/init.d/postgresql start # pg_ctl -D /usr/local/var/postgres start sudo /etc/init.d/postgresql restart sudo /etc/init.d/postgresql stop Commands Backslash
\l : list all dbs \c : connect to a db \du : list all user \d : list all tables \d &amp;lt;table_name&amp;gt;: list Backup and restore</description></item><item><title/><link>https://yingkui.com/cs/server/production/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/production/</guid><description>Production Initial sudo apt install libpq-dev bundle install EDITOR=&amp;#34;vim --wait&amp;#34; bin/rails credentials:edit # copy content in master.key to server # change username in database.yml RAILS_ENV=production rake db:create RAILS_ENV=production rake db:migrate RAILS_ENV=production rake db:seed RAILS_ENV=production rake assets:precompile</description></item><item><title/><link>https://yingkui.com/cs/server/rails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/rails/</guid><description>Rails -v 1. RVM -v Exactly based on https://github.com/rvm/ubuntu_rvm
sudo apt-get install software-properties-common sudo apt-add-repository -y ppa:rael-gc/rvm sudo apt update sudo apt-get install rvm sudo usermod -a -G rvm $USER echo &amp;#39;source &amp;#34;/etc/profile.d/rvm.sh&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc exit su ubuntu 2. RUBY -v rvm install &amp;#34;ruby-3.3.0&amp;#34; ruby -v 3. RAILS -v gem install rails -v &amp;#39;7.0.8&amp;#39; -V --no-document rails -v gem sources --remove https://rubygems.org/ gem sources -a https://gems.ruby-china.com 4. NODE -v sudo apt install nodejs node -v sudo apt install npm sudo npm install -g yarn # if want newest stable version sudo npm cache clean -f sudo npm install -g n sudo n stable npm config set registry https://registry.</description></item><item><title/><link>https://yingkui.com/cs/server/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/ssh/</guid><description>SSH (Secure Shell) Create a new user # create the user sudo adduser ubuntu # User Modification, --append, --Group add ubuntu to sudo group # sudo means superuser do usermod -a -G sudo ubuntu # switch user su ubuntu Generate key-pair # generate # id_rsa is private, id_rsa.pub # RSA is Rivest-Shamir-Adleman, the name of the algorithm ssh-keygen # authorize the public key cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys # display private key, so you can copy this to your local computer # remember to add a newline at the end of the file cat ~/.</description></item><item><title/><link>https://yingkui.com/cs/server/unix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/unix/</guid><description>UNIX File ls cd cp mv: rename rm mkdir touch: create a new file cat: display less / head / tails grep [pattern] [file] chmod: permissions chown chgrp &amp;lsquo;&amp;gt;&amp;rsquo;, overwrite &amp;lsquo;&amp;raquo;&amp;rsquo;, append &amp;lsquo;|&amp;rsquo;, pipe System pwd whoami ps ping ssh / scp curl / wget history / clear History Unix, 1970s Linux, Unix-like, 1991 Debian, a linux distribution, 1993 Ubuntu, based on debian, 2004 BSD, based on unix, 1978 FreeBSD, based on BSD, 1993 Darwin, based on bsd, 2000</description></item><item><title/><link>https://yingkui.com/cs/server/vim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/server/vim/</guid><description>VIM h / j / k / l: Left Down Up Right 0: line begin $: line end gg: file begin G: file end w / b: move word i: insert dd: delete current line :q: quit vim :q!: quite vim without saving :/: search :w: save</description></item><item><title>DP Bitmask</title><link>https://yingkui.com/cs/t/dp-bitmask/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/t/dp-bitmask/</guid><description>mask &amp;amp; (1&amp;lt;&amp;lt;j) # check mask ^ (1&amp;lt;&amp;lt;j) # remove mask | (1&amp;lt;&amp;lt;j) # set Arrangements max/min/cnt Min XOR sum def dp(mask, i): if i == n: return 0 res = inf for j in range(n): if mask &amp;amp; (1&amp;lt;&amp;lt;j): res = min(res, dp(mask ^ (1&amp;lt;&amp;lt;j), i + 1) + (nums1[i] ^ nums2[j])) return res return dp((1&amp;lt;&amp;lt;n) - 1, 0) Count def dfs(mask, prev): if mask == 0: return 1</description></item><item><title>Sort</title><link>https://yingkui.com/cs/t/sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/t/sort/</guid><description>Merge and Quick are more important Bubble, switch, forwards def bubble(nums): for i in range(n): for j in range(n - 1 - i): if nums[j] &amp;gt; nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] return nums Insert, switch, backwords def insert(nums): for i in range(1, n): for j in range(i, 0, -1): if nums[j - 1] &amp;gt; nums[j]: nums[j - 1], nums[j] = nums[j], nums[j - 1] return nums def insert(nums): for</description></item><item><title>Sort Key</title><link>https://yingkui.com/cs/t/sort-key/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/t/sort-key/</guid><description>cmp_to_key # https://leetcode.com/problems/largest-number/ class Solution: def largestNumber(self, nums: List[int]) -&amp;gt; str: comp = lambda a, b: 1 if a + b &amp;lt; b + a else -1 if a + b &amp;gt; b + a else 0 largest_num = &amp;#39;&amp;#39;.join(sorted(map(str, nums), key=cmp_to_key(comp))) return &amp;#39;0&amp;#39; if largest_num[0] == &amp;#39;0&amp;#39; else largest_num Complicated Key # https://leetcode.com/problems/reorder-data-in-log-files/ class Solution: def reorderLogFiles(self, logs: List[str]) -&amp;gt; List[str]: digits = [] letters = [] for log</description></item><item><title>é¢åä¿¡å·</title><link>https://yingkui.com/cs/signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yingkui.com/cs/signals/</guid><description>Technique Signals Cue Response Sum + Subarray Prefix Sum Largest / Smallest / k-th in sorted Heap / Quickselect Arrange to Find Max / Min Heap / Sort with Compare Competing Choices / Select or Skip Dynamic Programming Remember Seen Hashset / Hashmap String Prefix Trie Pattern / Substring Matching Rolling Hash / KMP Repeated Sorting Sorted List / Ordered Set Binary Tree Recursive Traverse / DFS Count Steps in</description></item></channel></rss>