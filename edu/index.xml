<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>《论教学》 on Output</title><link>https://albert.cn/edu/</link><description>Recent content in 《论教学》 on Output</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Copyright albert.cn All Rights Reserved</copyright><atom:link href="https://albert.cn/edu/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://albert.cn/edu/1-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/1-1/</guid><description>1.1 结果导向的教学 教育是一个包涵很广泛的概念，使用的场景也很多。不同的场景下教育的目的也不尽相同。为了使问题更为明确，我们将注意力放在一些特定范畴或满足一定条件的教育活动，并称之为教学。
本文中讨论的教学，包括了备考标准化考试的情景，例如，中学教育中，数学、物理、化学等学科；也包括了基于逻辑学和数学（或其他明确具体理论）的理论学习，例如，高等教育中，数学、计算机科学、物理学、化学等学科；还包含了实际应用中传授明确具体技能的学习，例如，软件工程中，编程语言（例如，Python）、库（例如，React）、软件（例如，Photoshop）等。
但对于一些比较不那么明确的、不容易测试或培养周期较长的教育目的，例如，对学生道德品质的培养，对学生创造力和探索能力的培养，对学生艺术鉴赏力的提升等，将会在教学中有所倾斜，或是在其他教育活动中不断渗透，但不是本文中讨论的核心方向。
所谓结果导向的教学，可以类比测试驱动开发（Test-driven development），也就是先明确教学的目的并且写好了检验教学成果的测试，才开始进行教学。也就是讲授者在讲授前，就对学习者能力改变有着明确的预期，并且可以通过量化的方式对其测量。
结果导向的教学，并不是意味着应试教育，虽然形式上追求的都是提高某个量化指标。正如上节所述，除了应付标准化考试外，结果导向的教学还适用于理论和技能的学习，例如，理解并娴熟的应用贝叶斯公式，从而更新本能的统计学直觉偏差。再例如，学习After Effects，从而进行动画或者视频的编辑。在教学前后，我们能看到学生解决问题半径的扩大，知识储备的增加，学习效果有着可以被区分的方法，都是可以明确测量和验证的，也同时达到了教育者和受教育者的预期。例如，学习者通过驾校的学习，可以在日常生活中开车代步。
而对于解决问题的能力或者批判性思维的能力的培养，需要专门的甚至反复的专门训练，而不是在其他知识中喧宾夺主的多目标却少成效（do mutiple things but do nothing well），例如，在初次学习游泳期间，培养其创新能力，有如对一个中国初中生用英语讲数学课。日常技能的训练可以为讲述这些抽象能力的策略做出实例上的积累，但显著的提高需要针对性的训练。
这教学过程中，有三个重要的对象，即：
验收材料 学习者（也就是学生） 教学材料 本文要讨论的，就是在对验收材料和学生进行了一定的要求后，为了达到一定的指标（接下来会具体讨论），如何提供更好的教学材料（例如，课堂讲授、教材编写、测试等）。</description></item><item><title/><link>https://albert.cn/edu/1-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/1-2/</guid><description>1.2 验收材料 对于一些较为机械化的教学目的，验收材料也就比较明确，例如，学生能够对一段音频进行背景降噪处理。但例如高考数学，对学生的要求较高，不少是对解决问题的通用策略的考察，验收材料就不那么容易准备。
我们这里对验收材料的类型进行一定的限制：验收的题目应该是可以被一个固定的生成器生成的。
定义 $t$ 是验收材料，$G$ 是一个生成验收测试题的算法，$r$ 是一个随机数（是生成题目算法的一个自变量），$S$ 是一个已知的解决问题的某个算法（或者算法集合）：
$$ \forall t.\exists G. \exists r.\exists S. t\in G(r) \&amp;amp; St $$
虽然很多情境下试卷尚不能用算法完全生成，但是头脑中存在这样一个严格的数学要求，可以减少许多情景的不适用。通俗的讲，就是考题的考察范围、考察难度、各题型考察频率，稳定性强，波动不大。
例如，对于一个综合性的考试（高考），各部分的占比应该有一个稳定的概率密度分布，但是验收材料（某一年高考）却只考查了一个知识模块（例如，全是三角函数的题目），就不符合验收材料的要求。
再例如，如果有教师在课堂上讲课的时候，是按照一个题型分布去讲解，而课下独自给学生补课时却是另外一个题型分布，验收测试的题目都是在课下学生补课的题型，就不符合我们对验收材料的约定。
一般来说，概念传授和技能培养类的教学，考察的题目类型的分布会比较集中，变化比较小。而选拔性的考试，题目变化大，综合性强，有一些不容易传授的策略性技巧。但只要验收材料是统一的标准下，不偏不倚，难度分布一定的，都可以在本文的讨论范围之内（虽然不能用程序直接写成，只能模糊的感知）。
另一方面，测试题目的难度应该是可以被解决的，作为教学来说，一般来说，传递的都是已经被人类探索过的领域，是比较成熟的理论概念和技术成果的传递，而不是要求学生探索新的研究（可以是调动积极性的短距离的、信号强烈的尝试探索，而不是深入的、信号很少的科研探究行为），也不是要求学生解决未解之谜（虽然有时教学目的要培养这样的能力）。通俗的讲，就是考题难度系数不能过高，以至于无法找到有效的传授方式。</description></item><item><title/><link>https://albert.cn/edu/1-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/1-3/</guid><description>1.3 对学生能力的假设 学生，也就是一个个区别很大的智力媒介，装载了不同数据和程序（软件差异）的有机图灵机，甚至存在着先天的智力差异（硬件差异）。这里举例说明，在教学过程中，值得注意的学生特征。
1.3.1 前置知识储备 如果一个已经开了十年车的人，为了通过驾照考试而去驾校学习，对于教练来说，是一件非常轻松的事。
这里讨论的前置知识储备，一方面，有可能学生已经可以轻松通过验收测试，也就是达到了技能上的掌握；另一方面，学生的前置知识储备对教学材料也有很大的要求，极端的例子，如果学生不识字，那么一门高中物理课的教学材料就几乎很难编写成功。
所以，本文中假设学生的前置知识储备在特定的学习内容上是大体一致的，例如，我们如果对一个高中生或者一个中年人讲解Photoshop的使用，我们假设他们都熟悉一定的计算机操作常识（例如，如何使用鼠标），同时又很少使用过Adobe CC系列的软件。
虽然前置知识储备对于教学材料的编写有着决定性的作用，但是对于一般的教学任务来说并不是很大的问题，例如，能够进入高中的学生，一般是通过了初中结业考试验收的学生，至少我们不会担心学生不识字。
不过，一般我们要在乎以下几点：
前置知识的娴熟程度，例如，对于初等代数符号运算的娴熟程度，是否有计算错误。 对于新的模块，例如导数，是否对前节的知识已经掌握，例如，在求切线方程时已经对求导掌握。 在编写教学材料时，应该对学生前置知识储备有着一定的假设，应付大多数学生的需求。 如果一个学生对于前置知识储备过少，那么应该让学生去学习前置知识，例如，前述的识字或者不具备基本的计算机操作能力。而不是将多种技能学习混淆在一起，用外语教游泳。
1.3.2 抽象归纳能力 在讨论抽象归纳（induction）之前，本应该讨论学生的执行推理（deduction）的能力。但本文假设学生者都是图灵完备（Turing Complete）的，是可以执行具体明确指令的。虽然严格的逻辑推理是需要学习和训练的，不过本文假设学生缺乏的是细致的、高分辨率的处理，而不是随机的、毫无根据的胡乱执行。而这种严格的逻辑思维训练，也是本文所覆盖的一种技能训练。除了运算能力外，我们同时还要假设学生在解决问题时具备一定的探索尝试能力，而不是在缺乏指令的情况下，过早放弃解决。
而抽象归纳能力指的是，对信息特征（尤其是显著特征）的剥离，能够从特例对象中找到一类对象的通用特征。不仅如此，我们还假设学生能够进行一些简单的带有特征的运算推理。具体讲在第二章中详细描述。
相对于现有的人工智能技术，可以说几乎每个人都具备极为强大的抽象归纳能力。但对于微弱的信号的敏感，从中可以找到通用的抽象规律，或是剥离出共有的抽象特征，却不是每一个人都具备的智力水平。
对于一些简单的抽象技术，例如，讲述一个排序算法，大多数人都可以通过实例，从而验证接纳排序算法的通用和正确。但是对于一些更为抽象的策略，例如，LALR语法分析就不是那么容易捕捉。
由于抽象能力的不同，学生对学习材料的忍耐程度也不同。抽象能力较强的学生，可以依赖更少的信息，捕捉到关键的信息，可以更早的（也就是更少的实例接触）忍受抽象表述。
另外，即使在信息传递的过程中，存在简化甚至是缺失错误，对于探索能力和抽象归纳能力更强的学生，也可以通过猜想来纠错和脑补（可以类比为 Autocorrection）。
1.3.3 忍受痛苦程度 如果学生的智力水平相当，痛苦忍受程度越高的学生，问题被解决的概率就越高。忍受痛苦，主要体现在更多的探索尝试，并在探索尝试过程中不断总结经验和抽象归纳，从而提高解决问题的概率。
一般来说，这与性格上的毅力以及好胜心有直接关系。如果一个学生更加争强好胜，不服输，目标更为坚定，面对困难可以承受更多的痛苦，坚持更久的时间，而不是遇到困难（无聊或者痛苦）便回避退缩，那么，在相同智力水平下，其解决问题的概率就越高。
但不仅仅是性格，也和学生对痛苦的预算有关，尤其对于非学校的学习场景，学生并不一定有足够的时间和耐心去学习。如果学习过程过于痛苦和困难，超过了学生的对时间和痛苦的预算，就会放弃。例如，如果个人电脑缺乏图形化界面，那么使用电脑的学习曲线就会劝退很多使用者（学生）。
本文中讨论的内容，并不以训练学生对痛苦的忍受能力为目标，而是考虑如何尽可能减少学习中所遇到的困难痛苦，降低掌握一个新概念、新技能、新领域的门槛，为学生的人生增添更多彩的乐趣、提供更多的职业或兴趣选择并更有信心和动力去尝试和投入不同的领域。
1.3.4 记忆力 相比于有着记录纸带的图灵机，人类的记忆能力过于脆弱。
学习过程中，短期记忆显得并不那么关键，因为学生或者解决者，可以通过辅助手段替代记忆，例如，把信息记录在纸上。
所谓的长期记忆，主要体现在对信号的反馈速度和准确程度，是学生在理解和接纳学习材料之后，对学习者来说最大的拦路虎之一。对于长期记忆好（或者是有好的记忆策略）的学生，在学习过程中有着巨大的优势，更容易产生更好的效果，并节约大量的学习时间。
由于长期记忆，一般体现在复习而不是初次学习上，从而本文并不会着重描述，而是把有利于长期记忆作为了一个需要达到的目标穿插在初次学习当中。
1.3.5 人脑和计算机的一些区别 为了更好的区分算法的复杂度和人脑计算的复杂度，这里列出人脑和计算机的一些区别：
计算机擅长存储，而人脑建立起一个新的链接需要大量的反复，计算机可以很快存储一个字典，但人脑背单词却需要很久
人脑擅长于迅速剥离实例的特征，把信息归类
计算机擅长于机械的运算，而人脑对于运算感到痛苦
人脑擅长于视觉化的信息，计算机擅长于符号化的信息
人脑擅长于抽象的运算，允许一定的模糊和不精准，而计算机对运算要求明确，经常报错</description></item><item><title/><link>https://albert.cn/edu/1-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/1-4/</guid><description>1.4 对教学效果的评价 定义 $\mathcal{H}_s$ 为在进行学习活动前的某个学生， $L$ 为 $\mathcal{H}_s$ 的在学习活动中进行的信息处理函数，$d$ 为这个学习活动中提供的学习材料，$\mathcal{H}_e$ 是学习活动后的学生，且有 $\mathcal{H}_e = L(\mathcal{H}_s, d)$ , $E$ 是某个测试函数，$\Delta t$ 是学习过程进行的时长，$p$ 为学生在学习过程中积累的痛苦值，定义学习效果为 $r$ ， 有：
$$r = \frac{E(\mathcal{H}_e) - E(\mathcal{H}_s)}{\Delta t}$$
测试函数的内容可以从简单的拨动灯具的开关，到充满创造力的独立制作一个皮克斯水准的动画片。
教学的目标就是最大化 $r$ 和最小化 $p$。具体地，我们可以分为三个级别：
可能性标准：至少能学会，即使花费大量的时间，也就是只关心 $r$ 值的分子部分 功能性标准：不仅能学会，而且可以在更短的时间内学会，同时痛苦值不至于逼得学生放弃 娱乐性标准：不仅可以高效率学会，同时拥有类似于电子游戏的娱乐轻松感 如果测试是法语，但是教学材料是日语，对于一个只懂中文的学生，就无法达到可能性的标准。可以认为现有的所有被大量采用的学习材料都具备可能性标准，因为我们可以观察到一定比例的学生可以通过测试，也就是存在可以学会的路径。
但是，现有的学习材料大多数都达不到功能性标准，也就是会有大比例的学生会被卡住，或者要忍受大量的理解教学材料的痛苦。与此同时，很多形式的学习材料，缺乏测试环节，学习效果通常由学习者感性得到，但人会有学会错觉（Illusion of Competence），从而错估了学习效果。
本文的主要目的就是要阐述如何让学习材料达到功能性的标准，并尽可能对学习增添娱乐性糖分。在接下来讨论的过程中，我们用掌握程度来描述 $r$ 值，用疲惫程度和娱乐程度来表示 $p$（根据其正负来定）。对于娱乐性，如果学习过程带来了痛苦，那可能会让学生放弃和回避，增加下一次学习的启动成本；如果带来的是成就感就可能促使学生想主动的进行更多尝试。
在学习效果的定义中，我们借鉴了机器学习中的字母表示，机器学习和教学过程有着一定的相关性：
机器学习是在明确了可训练数据 $d$ 的情况下，去寻找某个可以识别样式的 $\mathcal{H}$ 教学过程是在拥有一个强大识别样式的算法 $\mathcal{H}$，去准备提高训练效率的数据 $d$ 在教学过程中，我们同样会遇到统计学中所出现的概念，例如，交叉验证以及偏差和方差之间的权衡等。进行这样的计算学表述，将对后文中发现教学问题并改善教学效率有着直接本质的分析效果</description></item><item><title/><link>https://albert.cn/edu/2-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/2-1/</guid><description>2.1 学习者的需求和苦恼 2.1.1 学习者的需求 学时痛苦少，解题速度快
学生的核心需求和前文所述的教学评价是一致的，也就是让学习过程从吃力费劲到娱乐有趣，让做题速度从有点印象到流畅娴熟。
作为学习者，对技能的学习和训练，常有如下的需求：
能够有明确的学习目标和必备的技能列表 能够轻松的看懂听懂讲解 能够独立使用技能解决评价测试中的问题 能够便捷灵活的自测和复习，反复训练，扎实记牢 能够有足够的学习动力或激励措施 最重要的指标，就是通过学习，能够解决之前无法解决的问题，通过评价测试。如果可以达到这个目标，就希望可以在学的过程中，更加轻松愉悦，有更强的成就感，有更强烈的学习动力。
如果简而言之，可以认为学习者的基本学习需求是：
清晰易懂，扎实掌握
如果学习者极度厌弃学习，没有提高自我的动机，也便不在本书讨论范围之内。
2.1.2 学习过程的信息处理 这里直接给出学习内容的三个类型：
接受并记忆某个计算的初设，类似于给计算机输入程序，例如，定义一个变量或者提出某个概念
验证并记忆某个可以达到某个目的的计算过程，类似于计算机执行程序过程，例如，Dijkstra 算法
直接记忆某个计算的结果，例如，记住 $(e^x)' = e^x$
为了达到上述的学习目标，学生在学习过程中大致要进行如下的信息处理过程：
解析信息。把学习材料进行特征解析，转化为熟悉的、可以理解的概念和算法，解析信息过程中很容易出现模糊和卡顿，也容易产生疲惫。例如，如果在给出的材料噪音多信号少，就会增大解析的计算成本，从而提高疲惫感，降低解析的成功率。
执行计算。如果是图灵机级别的计算，其复杂程度与计算步骤数成正比。但是学习一般是要进行带着抽象的计算，也就是操作的对象是具有某些特征的类。在很多学习过程中，学生难以迅速准确的找到正在讨论的特征，从而使得逻辑断链，理解模糊。这不仅与学习材料质量有关，也和需要掌握的知识点的本身抽象程度有关。
存留信息。这就是前文所述的长期记忆，如何能让学生在学习的过程中，经过训练，可以更加扎实的记牢所要传递的信息，也就是决定了掌握程度。
为了更好的理解，我们可以假想一个通用的人工智能处理信息的过程：
解析过程就是将影音信息进行多个层级的处理，并对关键的信息进行细致的识别分类，并将有关概念的区域唤起（提高其在搜索时的优先级别）
执行运算就是带有抽象信息的执行指令，由于抽象信息可能解析的不够准确或者细致，会造成在执行过程的报错或者逻辑断链
存留信息就是选择性的对有效信息进行整理留存，由于摄入的数据量巨大，AI需要对接触过的信息进行优先级和抽象级别的筛选整理，并对高价值的（通常是高频）信息进行更长久的留存。对于教学过程来说，教学者要理解人脑对记忆的工作原理，并符合记忆规律的进行训练，达到事半功倍的效果。
学生是一个注意力脆弱的计算实体，作为提供教学材料的老师，要谨慎处理每一帧传递给学生的信息。
2.1.3 学习者的苦恼 依据学习过程的信息处理，可能对学生造成苦恼之处，有如下几种情况：
解析上的模糊、卡顿、痛苦，也就是看不明白学习材料，不知道在说什么</description></item><item><title/><link>https://albert.cn/edu/2-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/2-2/</guid><description>2.2 常见的教学失误和原因 2.2.1 常见的教学失误 教学上的失误，和学生的苦恼是大体重叠的。
教学上的失误，可以是课程设计上的，也可以是具体知识点的课时设计上的。
对于课程设计，
课程上没有结构设计，知识点安排混乱随意，没有复杂度和抽象程度的逐步提高
多个知识点过早的进行综合性的讲授或训练，增加了学生解析和记忆负担，不够清晰专注
对知识点没有进行归纳区分，导致需要积累的词汇量过大，没有注意到检验和解决的复杂度区别
对于课时设计，尤其是在学生对教学材料的信息处理过程中，容易出现如下失误：
信息解析困难：出现了难以解析的新鲜或者不熟悉的术语，一般是由于信息过于或过早抽象表达导致的，使得学生感到指代不明，或缺乏实例积累的清晰度不高
逻辑存在断链：在对信息处理时，不能接纳其计算上的逻辑，一般是由于推导步骤过于简洁，或者是某个转换规则不为学生所知
解析计算量过大：没必要的信息量，也就是噪音过多，喧宾夺主；学生依旧能获得信息，但是需要分配计算力去分辨和抓取需要留存的信息；极端的情况就是所讲与所考毫无关联，解题时，先验后验分布一致。
产生学会错觉：由于学生在解析和运算时，可能是在抽象程度较高的层面进行的粗糙处理，从而放松了很多限制，而测试材料对学生的要求更为具象和精细，使得学生以为自己已经很精细的理解了，实际上离能解决问题还有一定的距离。如前文所述，也存在因验证不是独立解决产生的，教师觉得学生已经学会的错觉，以为一道特例的验证代表了通用技能的掌握，一道综合题的理顺意味着各知识小点的理解和掌握
不熟练或遗忘： 留存过程和熟练过程需要更多的复习和训练
娱乐性不足：学习过程枯燥痛苦，令人乏倦，没有想主动再次进一步学习的兴趣
2.2.2 教学者的直觉弱点 急功近利，导致的贪多嚼不烂
过分的抽象 基于想快速传授知识，教学者常常采用 抽象的语言，总结性的语言 来传授知识。抽象描述，简洁、美观、通用、精准，是教学者自己学习后的智力成果（但不是为了教学而加工）。教学者使用抽象，可能是觉得抽象传播的准确快速，觉得简单没水平。
作为教学者，进行抽象的表达和传递，可以减少表达量，如果学生对抽象术语熟悉，学生可以迅速和准确的获取信息，教学者也有把自己深刻理解、独到见解迅速传递的成就感，越是教学经验多的教学者，因为对知识理解的加深，更容易犯这样的错误，也就是不站在初学者的角度，避免抽象，而是在一个已经掌握者的角度，去描述知识。
使用抽象的语言，去描述，是一件智力上偷懒的行为，在自己的脑海中，营造出一个实例，并对其特征进行描述，并不是一件容易产生歧义的事。但站在学生角度，逆着抽象去理解具象，就很容易带来模糊和歧义。
这种在缺乏实例支撑的初期，频繁的使用抽象术语进行描述，极大的增加了初学者解析信息的痛苦，产生挫败感。如果不加以一定的测试练习，很容易让学生模棱两可，产生学会错觉。做题的时候，还会遇到挫败。
过早的综合 基于想快速传授知识，教学者常常 过早进行综合性训练，而不是剥离的颗粒化训练 。这样的效果在于可以通过一两个题目的讲解，同时传递（而不是扎实的讲授）多个技能和知识点，期待学生可以硬拔提高，或者只是为了完成教学任务，而没有太关心教学目标，即使教学效果是脆弱的，容易褪去的。教学者不使用简单的题目测试，或许是因为觉得太简单，体会不到训练简单题目的实际意义。
过多的特例 教学者对于相对抽象的通用解法，缺乏解题思路的讲解。在解决问题中，存在着不可缩减的计算，也就是不总能抽象出一个样式，来缩减某些计算，只能通过直接的执行新鲜计算来完成，这也意味着验证和搜索的区别。对于一个通用性的题目，在没有信号刺激的前提下，为什么能够选择出某个对象而不是其他？也就是为什么可以迅速的搜索到恰当的实例？这也是一般教学过程中，教师容易犯得错误。如果老师看过答案给学生讲，就是在验证这个实例的计算，而没有解释如何找到实例，在什么信号下采取什么样的操作可以在新的情境下提高搜索效率。如果老师不解释这个问题，可以说问题并不是被解决，而只是被验证。这个情形下，老师只是扮演了一个更细致答案的角色，或者略高级的拍照搜题软件。如果教学者不能抽象并传递更为通用的技能，而是经常讲解特例的题目，要么老师想把抽象和训练的责任交给了学生，要么就是觉得学生就应该采用题海战术积累大量的词汇，而题海战术可以理解为机器学习中的过度拟合，只能对少量训练数据提高准确率，但对于新的测试数据很可能会出现方差过大的问题。
过少的独立 可以视教学者为学习过程中的一个工具，教学是一种解决问题的途径或方式，而不是目的。最终检验教学效果的是学生能否独立解决问题，是否学生有过分近似的误解，是否有不太顺畅的理解。教学者缺乏以结果为导向的自我教学效果检验，依赖于容易产生学会假象的学生的主观判断，而不是通过大量测试，让学生独立解决问题，从而去除歧义。如果在一对一的过程中，老师走到另外一个极端，对学生的帮助过于多，处处降低问题的门槛，使得学生缺乏差一点就够得着的挑战，也有碍学生的技能的磨砺和提高。
总结 教学者直觉的弱点，大多可以归咎于：不站在初学者角度思考，想短时间内传授大量知识。 也就是使用一种“硬拔式教学”法，可以让一部分自主学习能力强的学生迅速提高，但对于大多数普通学生而言，这是一个高高的门槛，把他们拒之门外，使技能的掌握显得遥不可及，甚至妄自菲薄，潜能受限。
凡此种种，是教学者缺乏智力加工的懒惰贪多，以及不切实际的急功近利。当出现问题时，常常又把责任推诿给学生天资不足或是懒散不用心。这些直觉上的错误，容易犯，但不容易察觉，更不容易更正。</description></item><item><title/><link>https://albert.cn/edu/2-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/2-3/</guid><description>2.3 解决方案与责任的分离 2.3.1 知识点的颗粒化 所谓的颗粒化，就是把知识点拆分成，一个个细小的点，也就是解决问题中的一个边。容易辨识的简化场景，复杂度低的执行流程。
采用颗粒化，可以达到诸多目的：
降低学习的复杂度，而不是解决综合难题，噪音被减弱，信号被增强，注意力可以更为集中的解决一类被简化的问题 对于抽象的描述和结论，可以在颗粒化的环境中，反复观察实例来理解，更容易去抓取关键特征，从而消除歧义 由于执行流程简短，更容易频繁的训练，从而即时消除学会假象，并通过可以联系，更容易使学生扎实掌握 由于更多的轻松挑战，更容易让学生产生成就感，降低枯燥，让被动学习变为主动学习，增加积极性 这些颗粒化的知识点，需要在对考察材料进行解剖和拆分，从而得到一个一个干净简洁的知识点。颗粒化的知识点可以类比成一个软件的库，它自己本身独立和完整，它对一些库有依赖关系，一些库又依赖于它。
2.3.2 频繁的测试 频繁测试就是在教学过程中不断让学生主动去回答问题，而不是被动的吸收信息。可以达到诸多目的：
通过测试，学生必须给出明确的答案，强迫学生提高理解的精细程度，避免有自以为学会但实际还有许多漏洞的学会错觉情形发生，学习中在得到成就感前有避免不了的痛苦，那就选择一个回报率高的痛苦 通过测试，达到刻意练习的目的，集中且略有间歇得面对多个链接卡顿，提高学生对信号的反应速度以及解决相关问题的搜索效率，积累实践经验，加深抽象理解 通过测试，学生可以在记忆有所遗忘的时期，强迫起回想，激励其复习，从而巩固；在实际教学中，学生对知识点的遗忘，对技能熟练度的退化，是学习过程中最大的拦路虎之一 通过测试，可以调动学生的积极性，在自我挑战中获得学有所得的成就感，降低学习的枯燥感，单纯的抽象联结记忆令人乏味，而具象的计算让人觉得满足 测试起到的是促进学习的作用，而不是通过测试来挫败和惩罚学生，也就是应该用简单换频率，而不是用痛苦换效率，这样会提高学习的门槛，降低学习材料的受众面。
颗粒化和频繁测试，并不能解决所有甚至大多数教学问题，但却是所有教学原则里，最为关键的两个方案：
2.3.3 责任的分离 因为教学材料要同时解决很多现实存在的问题，情况复杂，如果把责任混在一起，就会极大的增加分情况讨论的分支，从而无法通用的解决教学问题。
为了更好的把教学问题分解，这里把教学问题分为三个层次：
结构层：对验收题目进行分析，拆分出知识点，并对其进行属性标记（例如，出现频率、复杂度），对一块知识进行结构化梳理，明确先后和依赖关系。为了解决这一层级，涉及到如何解决问题，以及学习者学习路径的设计 技能层：对于一个单一的知识点，如何对其讲解和测试，采用什么样的形式，又要遵循哪些讲解和测试的原则。 激励层：如何通过外在的奖励激励用户，对学习的动力进行额外的补充 每一个层次，对其下一个层次，只需提供必要的信息，而不关心下一层次具体解决问题，这可以类比为计算机系统和计算机网络的层级模型。
三个层级与解决教学问题的关系 在结构层，解决结构化和碎片化的问题；
在技能层，解决实例化、勤测试、多辅助和趣味化的问题
在激励层，解决趣味化和激励措施的问题</description></item><item><title/><link>https://albert.cn/edu/3-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/3-1/</guid><description>3.1 讲测辅趣的必要和完备 讲测辅趣的缺一不可 讲授知识：知识有时候是人为定义的，比如，North 指的是 北方；很多技能是前人探索总结的结果，而学生学习就是节约探索所需要的智力消耗，故而，讲授再所难免；如果认为学习就是对抽象信息的记忆，那么讲解就是给出抽象信息 频繁测试：没有测试，就无法消除学生产生的学会错觉，增加知识的细致程度，就无法刻意练习，达到巩固的效果 辅助工具：每个学生的学习能力以及知识掌握情况不同，辅助工具可以满足个性化的需求；讲授知识，为了凸显信号，不能面面俱到，只能隐藏很多额外的有价值信息，辅助工具可以让这样的信息有容器存放 趣味糖分：讲测辅可以使之达到功能性的标准，而趣味可以使之达到娱乐性的标准 讲测辅趣的功能完备 保证看懂，需要输出；验证记住，需要输入
讲授知识，可以负责任何形式的信息输出，例如，视频，直播，教辅文字，音频等 频繁测试，可以负责任何形式的信息输入，以辅助和验证看懂并记住 辅助工具，可以负责任何形式的信息输入和输出。区别在于，讲授知识和频繁测试，可以作为主要信号的输入和输出，辅助工具可以作为任何其他信息的输入和输出；辅助工具，也可以有自己的辅助工具，从而可以分出任意的层次 趣味糖分，可以负责使产品从功能性达到娱乐性的标准，任何类似的功能，都可以归为“趣”</description></item><item><title/><link>https://albert.cn/edu/3-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/3-2/</guid><description>3.2 讲授知识 节约计算量，把痛苦用在刀刃上
学习新的知识和技能，尤其是概念上的跃迁（conceptual leap），避免不了因为思维活动而带来的痛苦。这样的痛苦，类似于体力和意志力，都会随着使用而消耗。当痛苦积累达到一定阈值，就会让学生产生厌恶心理，直到放弃学习，甚至对接下来的学习也产生一种抗拒。
本节所述的方案，就是围绕着如何把痛苦降低，同时提高学生的成就感和自信心。
3.2.1 对抽象术语的解析 缺乏实例的抽象，导致了，充满歧义的绝望
为什么在不太用心的教学（Effortless Teaching）中会使用大量的抽象描述？抽象描述，简洁、美观、通用、精准，是智力上处理后的结果，作为教学者，进行抽象的表达和传递，可以减少表达量，如果学生对抽象术语熟悉，学生可以迅速和准确的获取信息，教学者也有把自己深刻理解、独到见解迅速传递的成就感。教学者使用抽象描述，有足够的实例作为支撑，但教学者可能觉得自己学习时是走了弯路（其实可能是捷径），想要体现出知识传递的优势，让学生更加简单的学会。给学生真知灼见，给学生一个经过智力加工过的精华。
反直觉的是，相对于使用熟悉实例，抽象描述传递信息更为低效并且容易产生歧义和模糊。人脑是一个非常高效的样式识别器，并且可以通过对特征提取从而进行抽象级别的运算。但对特征的提取，需要足够的数据接触作为支撑。
在学生没有足够数量或者足够典型的实例做支撑的前提下，使用抽象术语，会让学生感到指代不明，对术语所表达的含义进行模糊的猜测，并对实例中体现的各个特征进行尝试比对，来验证自己的猜想，学生对实例越熟悉，对实例特征的提取就轻松，捕捉实例特征的能力就越熟练。如果学生连回想一个实例都吃力，那么让其凭空对实例进行特征剥离，并对其进行抽象运算，可谓难上加难。
教学就是让学生看懂，然后记住，难点在于，抽象信息不好看懂
为了解决由于抽象带来的解析困难和复杂度陡增，实际教学中可以采取如下办法：
选择学生熟悉的、相关特征比较明显的实例进行教学，尤其是使用图形化（包括动画）的方式 减少抽象的、追求规范（formal）的表述，相比一步到位，可以逐步提高清晰度，从粗糙到精细 对术语使用极为敏感，考虑学生是否对新鲜的概念术语有足够的实例积累 多为学生提供实例，让其在多个实例中抽象，也有利于学生对猜想交叉验证（cross validation） 对于多变量的情景，可以提供实验室或虚拟的软件实验室，让学生在大量实例中把玩探究 可以借助平面设计，从而降低解析复杂度，这将在后面的章节中展开 3.2.2 对计算的执行验证 在明确了计算对象后，就要进行对抽象概念的计算执行，在执行计算时：
常需要存储一些中间变量，在理解计算过程时，更快的让学生回想起这些变量的赋值，可以降低计算量。也就要求，教学者在提供教学材料时，尤其是搭配有语音讲授时，需将复杂中间变量予以呈现，而不是要求学生短期存储在大脑中，消耗没必要的计算量。而教学者又可能认为推导已经严谨，只需学生自行回看回想，而没有考虑到计算量的消耗对学习效率的影响，从而偷懒，降低了教学的质量。
常需要多步骤的推导过程，如果逻辑上出现跳跃，就可能会让学生产生疑惑，需要额外的计算来释疑。同时，过分详细的解释，也会让学生产生无聊疲倦，降低学习效率。对此，宁可烦，不能难，教学者更容易简化，而很难过分清晰（因为工作量更大，无法偷懒）；同时，简单的内容给学生更多的自信，有如游戏里频繁的无聊打小怪，而频繁逻辑跳跃，可能产生挫败感，甚至放弃。这种详细的辅助，可以作为可选的内容，隐藏起来，由学生来选择查看。
通过视频的方式呈现时，尽可能对正在讨论的变量或概念，进行高亮，从而让学生迅速定位到当前讨论的话题，从而降低复杂度。如果要对中间变量进行替换使用时，尽可能进行连贯的动画展示，表现出概念指代的一致，从而让学生轻易消除语言描述中的指代歧义
执行计算需要一定的时间，应该停顿出足够的时间让学生去消化，而不是过快的推进，囫囵吐枣。在此处，如果可以做到，即使学生有短暂的溜号甚至心不在焉，同样可以不那么费力的理解逻辑过程，那么可以认为在信息呈现上是足够舒适的。另外，即使学生不一定完全理解验证，但是给人一种如果稍加钻研就可以理解透彻的信心，并将理解放在做题中去细致展开，那么这个材料也是合格的。
执行计算消耗计算力，使人疲惫和逃避。教学过程中，要注意这些计算力的分配，明确重点，减少在不重要细节上的消耗，尽可能让听觉的信息，都有视觉的辅助，甚至最好都有动画的辅助，可以类比为，视觉辅助是在为听觉信息进行更容易理解的母语翻译。对于难点，要留出更多的时间，增加辅助的信号，降低难度，减少消耗。
3.2.3 噪音要少；辅助要多 噪音要少，就是减少学生需要理解、需要处理的量，使其计算力用在刀刃上，要少提供信息。
辅助要多，就是要帮助学生理解，提供更多的信息。
降噪是要减少信息的提供，让噪音变少，信号清晰明确；辅助是要给予更多的信息，消除更多的模糊和歧义，使得后验的分布更为集中。
噪音要少和辅助要多，一个要多，一个要少，是噪音还是辅助，需要教学者谨慎斟酌。
典型例题的颗粒化 在不太用心的教学（Effortless Teaching）中，可以采取一种硬拔式的教育，也就是把归纳总结、尝试探索的任务交给学生，给学生发一本带答案的综合题练习册，就如同把刚到一个新城市的人让其自行找路，或者直接给学生一把吉他让其自行探索演奏，再或者把一个成年人放在非母语的国外无助力的学习新语言。这样做也是可行的，只不过即使学生能够通过这种方法达到教育目的，也要走许多弯路，复杂度高，痛苦感强烈。最为重要的是，这样的办法会极大的提高教育的门槛，很多没有足够学习动力或者时间的潜在学生，被这种缺乏智力加工的方案拒之门外，丧失了自我提高的机会。
在日常学习中，不太用心的教学并不会完全硬拔式的教育，而是过早进行复杂度高的综合训练，这样的效果在于可以通过一两个题目的讲解，同时传递多个技能和知识点，并且是在实战（或者真题）中出现的情景。以高考数学为例，由于考试时长有限，考查内容繁多，又要起到明显的区分选拔作用，高考题通常采用多个知识点技能考察的方式，来达到目的，但日常教学中采用高考原题就会给学生带来很大的解析剥离和计算上的负担，对于接受能力强的学生来说，如同硬拔式教学，或许可以缩短学习时间，但对于更广泛的学生来说，即使能够接纳，课后存留的也多是混乱的、片段化的、模糊的或是过于特例的知识点，没有交叉验证和刻意练习的机会，若是过于复杂、难以接纳，这种做法同样是提高了学生获得更多技能、释放潜能的门槛。
减少噪音的干扰，突出起主要作用的信号，更加迅速的定位重点和难点，更加有效地利用人脑有限的注意力和对复杂程度的容忍度，提高发现抽象规律和技巧的几率，易于学生消化（可以类比为经过加工的食品），让信息传递效率更高，也让接受者减少解决问题的痛苦，通过训练提高熟练度，增加信心和成就感，从而降低使用产品的门槛，提高学生再次尝试的积极性。
越是反常别扭，越是应该颗粒化单独训练，内化成新的直觉
为了降低噪音，减少复杂度，在选择典型题时可以采用的如下的几种办法：
尽可能把技能元素化，分解成可消化的小块份（bitable size），分摊任务，Divide and Conquer 选择的例题不仅典型，还需简短，甚至要体现出简洁干净的美感 如有必要，简短的同时还要别扭，突出需要学会区分的信号 无论是为了更好的归纳，还是为了更好的区分，都要尽可能提供相似度较高的题目 为了减少对题目的解析，可以保持基本条件的一致或相近，略作变化，便成一新题 对于大技能的拆分，要直接给出上一步的结论，从而注意力集中在当下步骤的训练当中 对于信号的重要程度，可以按照如下进行粗糙的分类，并区分处理：
着重讲解而且要考察的，尤其是那些必须掌握的重点和不容易归纳理解的难点。对此，教学者常需要自问，什么是最重要的信息？最不容易被理解的特殊特征或计算是什么？要把这样的信息凸显出来，着重展示和讲解 为了要考察的信息的辅助信息，包括音频和图片。不一定更多的信息就更好，更多的信息意味着需要区分和处理，对于主要呈现的信息，简化的主体和辅助信息就可以了，可以把起到支撑作用的信息隐藏起来 音频上讲但是不考察的，音频上提到，意味着讲授者希望学生能够学会，但是又没有强迫学生学会 辅助上有但是不考察的，辅助中提到，可以认为是讲授者对那些想理解更为深入的学生，提供一个学会的机会，但因为掌握这些知识，和主体的学习目标相距很远，故而不做硬性要求。 3.</description></item><item><title/><link>https://albert.cn/edu/3-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/3-3/</guid><description>3.3 频繁测试 教学最重要的是测试，而不是讲授
讲测辅趣，最重要的环节就是测。讲解可以认为是测试的一个辅助，测试本身就是趣味化的一种，颗粒化的目的之一就是为了更好的刻意练习。频繁测试，在解析过程中可以起到提供实例、明确目标的作用，在验证中可以消除理解上的歧义、增加理解的清晰度，又是短期和长期存留的主要手段。
3.3.1 测试的目的 追求步步为营的扎实推进，而不是根基不牢的急功近利
通过频繁测试，可以同时解决学会错觉、不熟练或遗忘以及娱乐性不足的问题：
通过测试，学生必须给出明确的答案，强迫学生提高理解的精细程度，避免有自以为学会但实际还有许多漏洞的学会错觉情形发生，测试可以纠正偏差，通过测试题目的答案来积累实例以及弥补漏洞。学习中在得到成就感前有避免不了的痛苦，那就选择一个回报率高的痛苦
通过测试，达到刻意练习的目的，集中且略有间歇得面对多个链接卡顿，提高学生对信号的反应速度以及解决相关问题的搜索效率，积累实践经验，加深抽象理解。
通过测试，学生可以在记忆有所遗忘的时期，强迫起回想，激励其复习，从而巩固；如前文所述，在实际教学中，学生对知识点的遗忘，对技能熟练度的退化，是学习过程中最大的拦路虎之一
通过测试，可以调动学生的积极性，在自我挑战中获得学有所得的成就感，降低学习的枯燥感，单纯的抽象联结记忆令人乏味，而具象的计算让人觉得满足
值得一提的是，讲授过程，中学和大学有所不同，相比之下，大学的新概念和新抽象更多，所以讲授过程中出现指代不明、逻辑断链的概率更大，而中学的概念上的逾越不多，模棱两可的理解，产生学会错觉的情况更多，也就是说，中学生更容易产生理解掌握的感觉。从而，测试对于大学课程，更多的是提供归纳的实例，而对于中学课程，更多的是提高清晰度的明确，消除自认为已经理解的错觉。没有测试，作为教学者，你是难以判断学生是否真的理解的，因为学生很可能是懂得错误百出，误解你的意思，偏离了你的想法。
3.3.2 测试的解决方案 宁可烦，不能难
所谓频繁测试，就是在教学过程中不断让学生主动去回答问题，而不是被动的吸收信息。
在前两节的原则中，着重于对信息解决困难、解析计算量过大的问题。
为了达到频繁测试，可以采取的一些办法：
要多采用颗粒化（granular）的测试题目，勿以题小而不测
测试的目的要从辅助讲解到验收效果过渡，不断提高测试要求，减少对学生的辅助
对于刚开始学习的阶段，测试的目的不是检验，而是辅助学生学会的更有效的工具
对于一些简单的变形 ，可以采用以测代讲的方式，提供与讲解同一级别的辅助材料
对于综合题目的学习，可以通过测试来复习相关知识点并达到减少复杂度的作用
对于一些题目，学生可以选择做还是不做，但一定要有强制完成的测试，用以激励学生精细化处理
题目可以保持一致，多角度提问，降低题目解析的必要，减少噪音，突出重点
难度要有节奏感，不能总是一味追求简单，难度可以分散开来，但高难度的题目有时无法避免
除了最后的通关测试外，之前的测试和讲解，都是为了辅助学生过关，不是灌输，更不是检验，要让学生通过努力逐步的提高，而不是反复的自我证明。
多用简单换频率，少用痛苦换效率
对于频繁测试，应该用简单换频率，而不是用痛苦换效率，可以类比《超级马力欧》或是《塞尔达传说》中的大量的打小怪挑战，虽然充满短小乏味的挑战，但并没有让玩家乏味到不想继续。
3.3.3 存留率和解题阻力 Repetition is the mother of retention.</description></item><item><title/><link>https://albert.cn/edu/3-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/3-4/</guid><description>3.4 辅助工具 对于课时设计的教学失误，还有一个就是逻辑链存在断链没有着重解决，一般来说，在一对一的辅导中，如果学生积极主动，不容易出现逻辑链的断链，因为一旦有所疑惑，学生会和教师沟通解决。
但在编写纸质教材，或者录播课，以及大班课的环境下，很容易产生部分学生出现逻辑链断链的情况。
为此，可以采取如下的一些办法：
尽可能没有断链，宁可烦一点，也不在逻辑上有大的跳步 尽可能多的提供额外解释的材料（Q &amp;amp; A） 尽可能多的提供更多的实例 尽可能多为学生提供答疑的机会 在讲解过程中，辅助信息的几种类型
对于多数学生显而易见，可以解决的逻辑推导过程 可以不知道，直接记住的结论的推导过程，例如，$(e^x)' = e^x$ 更多的实例，更加详尽的解释或动画 自由度比较高的实验室 一些术语的扩展知识，例如，科学轶事 讲解过程，主要体现的是核心知识（Core），而辅助可以是解决部分学生个性化的疑问，也可以去表达一些不常见边缘情况（Edge），以及可有可无的扩展信息（More）。在测试中，辅助不仅仅是对于学生的一种提示搀扶，也可以作为讲授知识的一种新的形式（因为测试可以更多的激发学生的解题动力，辅助这时就可以借此机会进行解惑讲授，而且此时的学生对于学习材料粗糙程度的容忍度更高），也可以作为一种故意的设置障碍，驱动思考。</description></item><item><title/><link>https://albert.cn/edu/3-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/3-5/</guid><description>3.5 趣味糖分 3.5.1 电子游戏的类比启发 前几章所述，多为了能够在功能性上达标，但为了使得教学效果进一步提升，需要在娱乐性进行改善，提高学生学习的积极性。
很多人对电子游戏痴迷，而电子游戏也存在一定的知识积累和技能培养。不少电子游戏，是玩家花钱并投入时间培养没有实际应用价值的技能，从而去解决没必要的麻烦。全世界各年龄段的玩家都为之乐此不疲。
电子游戏的广泛受到欢迎，说明人是愿意接受挑战的，也是愿意通过主动解决问题获得成就感的，只不过对于这样的问题有一些限制，这也就是游戏相对于学习或者现实问题的优势：
现实教学中，失败有决定性的色彩，例如，考试成绩不好，被误解为能力的不足，试错的成本比较高；相比之下，游戏中即使发生了“死亡”事件，仍然可以重新尝试，允许试错，注意力被放在了提高技能上，而不是证明自我上；也就是说，游戏有惩罚却又不致命（Punish but not fatal）
现实教学中，问题的综合性比较强，解决方案常常超出能力范围，不知所云，不知所措，反复出现挫败；相比之下，游戏中的问题设计更为明确，也有明显的可以尝试的方案，甚至常常是令人觉得只要差一点就能成功的唾手可得错觉；也就是说，游戏有挑战却又触碰得着（Challenge but approachable）；对于学习而言，由于新鲜计算的引入，很难会因为简单而无聊。
现实教学中，知识传输量大，题型种类大，总是在练习新题；而在游戏中，尤其是超级马力欧的同一关卡，为了通关，学生可以对相同场景的反复练习，直到技能达到要求，也就是说，有重复却又有进展（Repeat but progressive）
现实教学中，外部的奖励一般发生在考试验收中，而不是在学习过程；而在游戏中，存在多层级的奖励惩罚机制，激励并诱导玩家，让玩家渴望下一个挑战
现实教学中，教学过程缺乏节奏感的调整和规划；而在游戏设计中，对挑战难度的设计是非常重要的环节，既不能让挑战过于简单，使得玩家觉得无聊，从而失去挑战动力，也不能让挑战难度过大，使得玩家觉得过于挫败，放弃游戏。游戏设计师可以通过对挑战频率、难度的设计，来舒缓或加快节奏，例如，按照起承转合原则设计的《超级马力欧：3D世界》部分关卡。相比之下，很多教学材料，就是满是断崖的《超级马力欧》，向前走几步就要消耗十几条命，举步维艰，令人崩溃
为了更好的理解，电子游戏和教学之间的类比，下面举例说明：
抽象的实例化：在《超级马力欧》和《塞尔达传说》中，出现的机关，多是周期性的执行，或者当一个道具使用后会再次产生一个新的道具，为玩家通过观察归纳机关的规律提供了可能，也可以使得玩家无顾虑的多次尝试，不断试错纠正，并提高技能熟练度
任务的颗粒化分割：《超级马力欧》通过地形高度以及敌人的攻击范围，隔离各个挑战；《塞尔达传说》通过地牢房间，隔离各个挑战，让玩家每次只需解决一到两个问题。日常学校中，在初期就做综合题，可以认为是游戏设计中，一上来就打Boss
搜索和验证：在《塞尔达传说：旷野之息》中，很多神庙的发现是需要和NPC交流，或者根据各种其他提示得到的，也就是通用的解决这个问题需要玩家主动搜索；而如果看攻略，会直接告诉玩家去什么位置，采取什么操作可以发现神庙，也就变成了验证，少了很多计算的复杂度。如果老师上课按照答案去讲，不去讲解思路，就如同一个攻略书，能够解决孤立的问题，却无法掌握通用的技能
解决问题的类型：对于游戏中的常规挑战，一般采用的识别-执行的简单的膝跳反射操作，可以通过刻意练习提高熟练度；在《超级马力欧》中，经常出现多个挑战同时出现的情景，也就是简单的结合题；在《塞尔达传说》，为了解谜，常需要考虑在新鲜的场景下，如何利用已有的工具，甚至对工具的变形应用（宝箱作为重物压住机关）；在游戏中，新出现的敌人或者挑战，需要玩家通过观察，归纳规律后，进行解题
易于解析的信号设计：在《超级马力欧》和《塞尔达传说》中，神庙的颜色是明亮的橙色，需要撞击的方块也是明亮的橙色，等得到金币没有东西之后就变成了无聊的深褐色。相比之下，很多书籍，文字都是差不多一样的样式，需要读者自己去解析、区分、整理信息
可以看出，之前章节中所采取的策略，和电子游戏中提高趣味的策略有所吻合，也就是说，恰当的教学设计可以提高学习的乐趣，降低学习的痛苦，提高学习的动力。
3.5.2 教学过程中的糖分设计</description></item><item><title/><link>https://albert.cn/edu/3-6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/3-6/</guid><description>3.6 软件化 软件化，并不是教学的信息化，而是教学的计算学化
如果教学方式漏洞百出，就如同一个乏味的戏剧，不论因为变成胶片，就会对娱乐质量有什么太大的提升。
软件化，并不是教学的信息化，而是教学的计算学化，是对教学内容的革新，不是信息表现形式的革新。
软件化的优势 随时随地的学习和复习 按照自己的节奏学习，而不是适应平均节奏 更加稳定的、可以复制的教学质量 软件化的劣势 无法随时定位并解答，这要求内容制作者要对学生可能出现疑惑的地方有所预判 不能更为灵活的适应，更多的是提供一个通用性的解决方案，而不是完全个性化的设计</description></item><item><title/><link>https://albert.cn/edu/4-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/4-1/</guid><description>4.1 如何解决问题？ 一般来说，很难在一开始就明确生成验收测试题的算法 $G$，但却可以找到或是想出验收测试题的样本，例如，往年的考试真题或者模拟题。如果考题缺乏变化，无非是随机抽样或者简单的更换数字或场景，那么就很容易明确生成测试题的算法，也就容易准备需要学习者掌握的元素化的知识点。但如果考试题富于变化，是某些通用性解决问题策略的考察，那么如果采用强健技术的方式，就会使得备考工作量巨大却仍有所疏漏。
这一章的目的就是，在拥有测试材料样本的情况下，如何准备元素化的教学知识点？教学者要知道如何使用恰当的办法解决这些问题。这样问题就转化成了：如何解决问题？在解决问题之前，我们要明确什么是问题，和为什么问题可以被解决？这就不得不去明确什么是思考的界限。本章将从计算学的角度逐层分析这些问题。
4.1.1 计算 这里将对计算进行讨论，这里使用图灵（1936）的模型：
可区分性：存在可以区分的不同对象，是计算最本质的基础。
可组合性：所谓组合性，就是可以把可以区分的对象放在一个可以区分前后的抽象容器当中，例如，向量或者图灵机的方格长纸条。可组合性使得我们可以通过组合可区分对象得到更多的可区分的对象。由于抽象容器中，存在空状态，这就使得，只要我们拥有一个非空状态就能得到无穷多的可区分对象。可组合性，其实就是计算对空间存在的要求。
可转化性：所谓转化性，就是可以规定把任何一个可区分的对象，转化为另外一个任何可区分的对象。可转化性，其实就是计算对时间存在的要求。转化不仅要可以转化当前可感知的符号对象，还可以在空间上去访问临近的符号对象，从而做出判断。由于每一个转化规则又是一个新的可以区分的对象，从而可以将原子化的转化规则组合起来，形成一个有次序的指令串。这样的规定可以使得，对于可以区分的对象，可以使用可区分的符号来指代，从而缩短计算量。由于转化规则中，存在一定的通用处理方案（例如，如果不是，指针向右），使得抽象对象成为可能。计算指令都是可以用一阶逻辑来表达的。
当我们对一个计算实体赋予如上足够能力时，就可以是图灵完备的。根据邱奇－图灵论题，这就是一个计算实体所需计算技能的最高上限。本文中，最核心的假设就是邱奇－图灵论题。本文作者相信，任何一个图灵完备的计算实体，例如手机和个人电脑，都具备达到人脑智力的可能，也就是相信通用人工智能的可能。
4.1.2 抽象 定义 $A$ 为某一个严格定义的算法，而 $d_r$ 是 $A$ 输出的一个可能数据，那么所有可以满足：
$$d_r == A(d_i)$$
的 $d_i$ 便是一个类。使用集合的语言表达，即是 ${d_i : A(d_i) == d_r}$
由于计算中对转化性的设置，使得计算总是决定性的，而逆运算可以有不止一个初设可能，从而形成抽象。因为我们可以定义类，也就定义了新的可以区分的概念，例如，偶数。对于这样的新概念，我们看作是某些可以元素化计算要求的简单组合，例如一些元素化判断条件的合取范式（Conjunctive Normal Form），编程语言中的类型检查就是比较容易明确的类概念。
抽象的本质就是对信息的剥离，减少对具体、明确信息的限制，得到更为通用的规律，而不是限制严格、缺乏弹性的计算结果。前文提到计算中要求有区分性，抽象就是减少可以使之被区分的部分信息。抽象使得信息传递更加简洁，使得计算结果更加通用。这些对信息的限制可以理解为特征，也可以认为是信息，也是定义中关心的限制，或者抽象对象具备的能力。
对于一个具象信息 $x$，可以隶属于无数的类，如何从这些类中选择出可以体现 $x$ 显著特征（或是在语境下的显著特征）决定着解决问题的搜索效率，例如，一般来说，对于三个苹果，最显著的特征可以是三个和苹果。 定义 为抽离特征的一个算法， 是剥离出来的显著特征集合，对于某个具象信息 ，有：
$$A_{fe}(x) == d_f$$
对于 $A_{fe}$ 的具体执行算法，这里无法展开并明确，本文中，只能去假设存在这样一个通用的算法，并且每一个智能个体（agent）由于计算经历不同所得到的显著特征不尽相同。
假设某一抽象对象 $a_i$，具备 $f_{1} \land f_2\land \cdots \land f_n$ 的显著特征。我们可以带着这些特征进行计算，得到的不一定是具体的结果，而是满足一定特征的新抽象对象 。我们称这种带着抽象进行的计算推理为抽象计算，或者是元运算。通过抽象计算，我们可以验证两个不同算法的计算等同性，也就可以验证两个不同抽象对象的抽象限制的等同性（同类）。 抽象的价值在于，如果进行了抽象级别的运算，那么一个类满足的规律对于每一个实例都满足，也就是缩短了计算量（也就是三段式）。 与此同时，抽象对象还可以隶属于更加抽象的类，同样，更为抽象的对象满足的计算结果同样适用每一个更少抽象对象，例如，$a^2-b^2 = (a-b)(a+b)\Rightarrow 14^2 -13^2 = (14-13)(14+13)\Rightarrow $ 一共十四个农场，每个农场十四只羊，其中十三个农场里每个农场卖掉了十三只羊，所有农场还剩十七个羊。</description></item><item><title/><link>https://albert.cn/edu/4-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/4-2/</guid><description>4.2 解剖和统计 经过之前的讨论，当明确了如何解决问题的方式之后，我们可以对题目解答过程进行分解：什么样的信号下，应该采取什么样的行为？信号如果过于具体，解决范围过小，那么记忆量就会达到不可接受的级别；信号如果过于抽象，解决范围会很大，但可训练度下降，学习痛苦增加。
相比于科研，教学过程的要求可以很低，或者说可以从很低的层面开始。通常情况下，需要处理的信号明确，方法也直接，甚至机械。对学生的理解，是可以有不同级别的阶段，从仅仅知道术语，到能够流畅执行常规的技术，学生在教学过程中的经历，就是其对这一块知识点解决范围逐步扩大的过程。作为提供内容的教育工作者，其实就是要考虑，如何在学生不同的学习阶段，提供恰当的学习材料。
学习就是对技能的记忆，只不过有一些技能比较抽象，不易训练。
无论是路径还是信号，我们应该统计：
在考察当中出现的频率（不一定是直接考察，可能是解决问题的一个边） 强健程度，是否在大多数情况下实用有效 抽象程度，是否需要学生去识别一些隐藏的样式，很大程度上决定了可训练度 计算复杂度，是否需要大量的计算步骤，增加学习负担 有了这些统计数据，可以使得在教学结构上的安排有所依据。为了便于讨论，也基于实际需求，我们对学生解决半径的要求到达一定范围即可：熟知新鲜术语概念，流畅使用常用技巧，能够与其他知识结合，能够进行简单的变形和构造。</description></item><item><title/><link>https://albert.cn/edu/4-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/4-3/</guid><description>4.3 课程结构 课程结构的设计，就是知识点授课先后的路线图。对知识点进行区分排序的属性依据，主要就是前文所述的考察频率、强健程度、抽象程度以及计算复杂度。
课程结构的设计，可以类比为，为一个来到新城市定居的移民介绍这个城市。我们要根据日常生活中使用频率的高低，对一些主要的地标场所和主要街道进行介绍，这样接下来当其需要解决问题的时候，会从这些最常用的道路去尝试解决，同时也增加了平时其和他人交流的便利。
对于课程结构的设计，应该是随着课程的推进，学生可以解决问题的半径在逐步增大，尤其是对于基础、高频、通用的问题覆盖面逐渐变大。我们可以对课程结构分为入门、必备、进阶、拓展四个层级。入门级别可以认为是科普或猎奇级别的理解和记忆，由于入门级别的任务较轻，本文把入门放入必备中，从而，本文对课程结构分为必备、进阶、拓展三个层级，如果学生对某个领域想略有理解，而不是熟练地掌握相关的技能，并不作为本文的讨论重点。
对于必备阶段，最开始需要传递的，自然是定义和概念，使用的频率最高，因为所有相关的问题都要涉及到定义和概念的信息处理。熟练准确扎实的掌握定义，是使用更为复杂技能的基础。进一步需要传递的，应该是最常用的性质和定理，可以认为是解决一类问题的必经之大路。
在必备阶段，对结构的设计不仅仅要考虑到技巧的使用频率，还要考虑学生的学习体验。由于学生对于领域的生疏，陌生感就如同来到一个不讲母语的新国度，很容易对新鲜信息产生恐惧感，所以这个阶段一个首要任务，就是让学生对领域建立熟悉感，让他们成为自己熟悉不畏惧的朋友，有信心和兴趣去和新城市里的朋友去聚会、进一步交流。
熟悉信号、建立信心是必备阶段一个重要的指标。从而，尽可能的找使用频率高、复杂度较低的技巧。而且尽可能的使用算法级别（或者强策略技术）的套路，而不是让学生提早理解深层规律，同时要避免过早抽象。即使是一些需要注意的特殊情景，也最好先不提及，而是让学生有种一学就会、一用就灵的舒适学习体验。
学生在必备阶段的训练，不仅能够建立熟悉感，而且也是积累实例的过程（我们假设学生会潜意识的处理实例，分析其共有的特征），为下一步进行更为抽象技能的传递做好数据积累、样式识别的准备。通过必备阶段的学习，学生突破了概念上的逾越，对信号处理的迷茫，不仅能够解决常规问题，也可以有更好的基础去挑战更为复杂和变形的问题。
进阶阶段的学习，一方面可以是对必备阶段技巧的通用性的抽象描述，学得越多，需要记得笔记越少，并且通过简单的变形拓展，进一步提高解决问题的半径；另一方面也可以是对更加低频和更为抽象技巧的传递。相比必备阶段，进阶阶段的学习，让学生对领域的理解更加深入本质，也让学生进一步积累更多的知识点词汇。
拓展阶段的学习，在日常教学的使用频率不是很高，就是让学生积累更多的频率更低的技能，理解更为抽象的通用解决问题的办法。拓展阶段的技能要么使用场景少，要么可训练度很低，并不是很容易吸收掌握。可训练度低是技能本身的特性，可以认为无论教学形式如何变化，在有限时间、有限训练样本内，其适用的学生群体比例都是有明显上限的。
一般来说，可以按照这样的结构，逐步增加解决问题的范围：
给出定义和概念，传授最常见的性质和技巧 训练使用频率和强健程度都高的知识点技能，提高熟悉感和建立信心 能够通过单一（或者少数）变量的积累变化来解释的简单抽象规律，包括了基于变量思想的应用 能够通过对已有技能的近距变形或迁移，可以在少数步骤内探索到的区域 需要遍历穷举，尝试归纳，需要更多的步骤来探索的区域 以及，从词汇积累和抽象程度上的逐步扩大解决问题的范围：
积累更多的、使用频率较低的词汇 学习解决范围较大却抽象程度较高、不易训练的技能 综上所述，课程结构的设计，既要考虑解决问题半径的逐步扩大，也要考虑学生学习效果的最大化。</description></item><item><title/><link>https://albert.cn/edu/4-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/4-4/</guid><description/></item><item><title/><link>https://albert.cn/edu/4-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/4-5/</guid><description>4.5 教学的目的 积累词汇，解决实际问题，技能的娴熟
积累通用的解决问题的办法，认知能力，智力水平的提高
积累不同类型的情景，为创新、结合和类比借鉴做池子，增加知识容量，增加抽象概念的池子</description></item><item><title/><link>https://albert.cn/edu/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/examples/</guid><description>实例库 金融类：虚拟货币 概念 什么是 Hash ？ 什么是 Stake ？ 数理类：高中数学或者物理 概念 什么是复数？ 工程类：计算机科学</description></item><item><title/><link>https://albert.cn/edu/version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://albert.cn/edu/version/</guid><description>Version History 第一版 发布于 2021.07.01 第一章和第四章主要是在2021年7月初写成 婚礼之后的两周 第二版 发布于 2021.12.30 第二章主要是在2021年12月末写成 多次隔离期间 第三版 发布于 2022.02.22 第三章主要是在2022年春节前后写作 MVP确定前后</description></item></channel></rss>